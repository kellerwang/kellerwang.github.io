<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KylerのBlog</title>
  <subtitle>程序员 &amp; 旅行爱好者 &amp; 业余厨师</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kyler.wang/"/>
  <updated>2017-01-04T03:12:01.000Z</updated>
  <id>http://kyler.wang/</id>
  
  <author>
    <name>Kyler Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mockito粗讲&amp;import static</title>
    <link href="http://kyler.wang/2016/12/29/mockito%E7%B2%97%E8%AE%B2&import%20static/"/>
    <id>http://kyler.wang/2016/12/29/mockito粗讲&import static/</id>
    <published>2016-12-29T08:12:32.000Z</published>
    <updated>2017-01-04T03:12:01.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么时候我们这么需要mock&quot;&gt;&lt;a href=&quot;#什么时候我们这么需要mock&quot; class=&quot;headerlink&quot; title=&quot;什么时候我们这么需要mock&quot;&gt;&lt;/a&gt;什么时候我们这么需要mock&lt;/h2&gt;&lt;p&gt;今天同事抱怨controller层测试用例搞起来麻烦，我本以为是需要模拟HTTP请求（请求头和参数），于是推荐了mockmvc，一个spring 4.X默认支持的测试框架。使用起来很方便，例如我们模拟访问/balance。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;MockMvc mockMvc = standaloneSetup(balanceController).build();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mockMvc.perform(get(&amp;quot;/balance&amp;quot;)).andExpect(MockMvcResultMatchers.content().string(&amp;quot;1&amp;quot;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;但是mockmvc并没有帮他解决问题，我问他原因。他解释说是因为他困扰的不是模拟HTTP请求，而是他controller层代码耦合了大量的业务逻辑，里面包括对一些其他系统接口的调用，而不得不吐槽的是我司的测试环境很不稳定，调用其他系统很可能失败，影响了他对正常业务逻辑的测试。&lt;/p&gt;
&lt;p&gt;首先，我比较提倡的是系统输出接口层，不要耦合业务逻辑。简单讲就是尽量controller或者rpc imp类主题是一个大的异常处理框架包含几个自己封装的service类。当然一些老代码不好改，或者有些人不喜欢这样，这时测试就会遇到麻烦，如何解决呢？就需要mock，将第三方系统(甚至自己系统)的方法全部mock掉，让业务逻辑顺利走下去。&lt;/p&gt;
&lt;h2 id=&quot;mockito&quot;&gt;&lt;a href=&quot;#mockito&quot; class=&quot;headerlink&quot; title=&quot;mockito&quot;&gt;&lt;/a&gt;mockito&lt;/h2&gt;&lt;p&gt;mockito是一个轻量级的mocking框架，具体可以&lt;a href=&quot;https://code.google.com/archive/p/mockito/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;，这里就简单讲下如何使用。&lt;/p&gt;
&lt;p&gt;一般来说我们会先mock一个需要mock的类。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;BalanceQueryServiceClient balanceQueryServiceClient = mock(BalanceQueryServiceClient.class);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中balanceQueryServiceClient.getEmayBalance())是我们系统需要调用的方法，这个方法会返回一个BalanceResult类。于是我们自己构造一个BalanceResult对象，并设定在调用mock的其中balanceQueryServiceClient时返回该对象。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;BalanceResult balanceResult = new BalanceResult();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;balanceResult.setSuccess(true);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;when(balanceQueryServiceClient.getEmayBalance()).thenReturn(balanceResult);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们需要把我们mock的balanceQueryServiceClient放回我们系统的BalanceControllerl类，这里用到反射。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;BalanceController balanceController = new BalanceController();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Field field = balanceController.getClass().getDeclaredField(&amp;quot;balanceQueryService&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;field.setAccessible(true);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;field.set(balanceController, balanceQueryServiceClient);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;import-static&quot;&gt;&lt;a href=&quot;#import-static&quot; class=&quot;headerlink&quot; title=&quot;import static&quot;&gt;&lt;/a&gt;import static&lt;/h2&gt;&lt;p&gt;比较有意思的一点是写代码时注意到我没有新增任何mockito的maven repository，可能是我因为用的ide是intelliJ IDEA有自动集成。需要的同学可以加入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.mockito/mockito-all --&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;org.mockito&amp;lt;/groupId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;mockito-all&amp;lt;/artifactId&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;1.9.5&amp;lt;/version&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外上节中使用的mock和when方法实际来自Mockito.mock和Mockito.when，我们能直接在代码中像类内静态方法般使用mock和when源自import static。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import static org.mockito.Mockito.mock;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import static org.mockito.Mockito.when;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该特性通常称为“静态导入”,语法必是import static后面跟你想导入的static成员的完全限定名称，或者通配符。引入static import最主要考虑到两个需要，第一个就是对一些工具性的，常用的静态方法进行直接引用。&lt;/p&gt;
&lt;p&gt;但是需要注意的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;提防含糊不清的命名static成员。例如，如果你对Integer类和Long类执行了静态导入，引用MAX_VALUE将导致一个编译器错误，因为Integer和Long都有一个MAX_VALUE常量，并且Java不会知道你在引用哪个。&lt;/li&gt;
&lt;li&gt;package与类别等可以用于管理一些资源，避免同名冲突发生，而”import”与”import staic”则是反其道而行，让您可以获得一些方便，如果同名冲突发生了，这种方便性的使用就有考虑的必要了。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么时候我们这么需要mock&quot;&gt;&lt;a href=&quot;#什么时候我们这么需要mock&quot; class=&quot;headerlink&quot; title=&quot;什么时候我们这么需要mock&quot;&gt;&lt;/a&gt;什么时候我们这么需要mock&lt;/h2&gt;&lt;p&gt;今天同事抱怨controller层测试用例搞起来麻烦，我本以为是需要模拟HTTP请求（请求头和参数），于是推荐了mockmvc，一个spring 4.X默认支持的测试框架。使用起来很方便，例如我们模拟访问/balance。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;MockMvc mockMvc = standaloneSetup(balanceController).build();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mockMvc.perform(get(&amp;quot;/balance&amp;quot;)).andExpect(MockMvcResultMatchers.content().string(&amp;quot;1&amp;quot;));&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>sublime+markdown实践</title>
    <link href="http://kyler.wang/2016/12/28/sublime-markdown%E5%AE%9E%E8%B7%B5/"/>
    <id>http://kyler.wang/2016/12/28/sublime-markdown实践/</id>
    <published>2016-12-28T07:24:45.000Z</published>
    <updated>2016-12-29T07:19:33.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;from-Mou-to-sublime&quot;&gt;&lt;a href=&quot;#from-Mou-to-sublime&quot; class=&quot;headerlink&quot; title=&quot;from Mou to sublime&quot;&gt;&lt;/a&gt;from Mou to sublime&lt;/h2&gt;&lt;p&gt;markdown这种轻量级标记语言被多数科技公司作为主流文档编辑语言，使用起来也是灰常方便。笔者在mac上编写markdown语言原来主要使用&lt;a href=&quot;http://25.io/mou/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MOU&lt;/a&gt;，但是日前osX升级到10.12.2后mou突然抽风不能使用。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://7xve7o.com1.z0.glb.clouddn.com/16-12-28/54692701-file_1482910576451_14afa.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;所以笔者不得不考虑新的编辑器，Google后发现sublime+markdown插件就是不错的选择。因为笔者因为穷（sublime不购买20mins会弹一次购买提示）不太经常使用sublime，所以这里写一篇入门给同样不熟悉sublime的小白，如何在sublime上安装使用markdown插件。&lt;/p&gt;
&lt;h2 id=&quot;安装markdown插件&quot;&gt;&lt;a href=&quot;#安装markdown插件&quot; class=&quot;headerlink&quot; title=&quot;安装markdown插件&quot;&gt;&lt;/a&gt;安装markdown插件&lt;/h2&gt;&lt;p&gt;下载安装&lt;a href=&quot;https://www.sublimetext.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sublime&lt;/a&gt;，按下Control + `，然后粘贴上下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import urllib.request,os; pf = &amp;apos;Package Control.sublime-package&amp;apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &amp;apos;wb&amp;apos;).write(urllib.request.urlopen( &amp;apos;http://sublime.wbond.net/&amp;apos; + pf.replace(&amp;apos; &amp;apos;,&amp;apos;%20&amp;apos;)).read())&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用快捷键 ‘command + shift + p ‘ 进入到Sublime 命令面板，输入 “install package” 从列表中选择 “install Package” 然后回车。稍等片刻，sublime会显示可供安装的插件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xve7o.com1.z0.glb.clouddn.com/16-12-28/89038682-file_1482911496348_6a40.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;sublime上使用markdown主要需要两个插件，一个是MarkdownEditing，主要是提供markdown相关语法的显示效果；另外一个是OmniMarkupPreviewer，主要提供markdown展示导出相关功能。两者的安装方法一样，都是在 “install Package”后在输入界面输入MarkdownEditing和OmniMarkupPreviewer，然后回车，是不是很方便XD。&lt;/p&gt;
&lt;h2 id=&quot;MarkdownEditing使用&quot;&gt;&lt;a href=&quot;#MarkdownEditing使用&quot; class=&quot;headerlink&quot; title=&quot;MarkdownEditing使用&quot;&gt;&lt;/a&gt;MarkdownEditing使用&lt;/h2&gt;&lt;p&gt;个人使用感觉，MarkdownEditing和OmniMarkupPreviewer联合使用效果比MOU还有爽。首先MarkdownEditing提供快捷键用于快速插入markdown标记，比较常用的如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;command + shift + k 插入图片&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但更帅气的是MarkdownEditing增加的几个”code snippet”，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入 “mdi + tab” 会自动插入下面的图片标记&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;![Alt text](/path/to/img.jpg &amp;quot;Optional title&amp;quot;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;输入 “mdl + tab” 会自动生成下面的链接标记&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[](link)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外感觉MarkdownEditing插件更方便程序员使用，插入代码可供根据语言高亮显示，貌似MOU没有类似功能。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xve7o.com1.z0.glb.clouddn.com/16-12-28/95453670-file_1482912298671_6333.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;OmniMarkupPreviewer使用&quot;&gt;&lt;a href=&quot;#OmniMarkupPreviewer使用&quot; class=&quot;headerlink&quot; title=&quot;OmniMarkupPreviewer使用&quot;&gt;&lt;/a&gt;OmniMarkupPreviewer使用&lt;/h2&gt;&lt;p&gt;首先可以过点击菜单栏&lt;code&gt;Preferences - Browse Packages&lt;/code&gt;打开其Finder窗口，其中&lt;code&gt;OmniMarkupPreviewer.sublime-settings&lt;/code&gt;是其设置文件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;/* OmniMarkupPreviewer default setting, DO NOT MODIFY */&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;server_host&amp;quot;: &amp;quot;127.0.0.1&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;server_port&amp;quot;: 51004,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;refresh_on_modified&amp;quot;: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // delay after modified, in milliseconds&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;refresh_on_modified_delay&amp;quot;: 500,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;refresh_on_saved&amp;quot;: true,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // User defined command for launching preview in web browser&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // For example:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //   Launching preview using Google Chrome in OS X:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //      [&amp;quot;open&amp;quot;, &amp;quot;-a&amp;quot;, &amp;quot;Google Chrome&amp;quot;, &amp;quot;&amp;#123;url&amp;#125;&amp;quot;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;browser_command&amp;quot;: [],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // User public static files should be placed into&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //   $&amp;#123;packages&amp;#125;/User/OmniMarkupPreviewer/public/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // User templates should be placed into:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //   $&amp;#123;packages&amp;#125;/User/OmniMarkupPreviewer/templates/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Requires browser reload&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Built-in templates: github, github-v1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;html_template_name&amp;quot;: &amp;quot;github&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Polling interval for content changes in web browsers, in milliseconds&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Requires browser reload&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;ajax_polling_interval&amp;quot;: 500,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // list of renderers to be ignored, case sensitive.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Valid renderers are: &amp;quot;CreoleRenderer&amp;quot;, &amp;quot;MarkdownRenderer&amp;quot;, &amp;quot;PodRenderer&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //     &amp;quot;RDocRenderer&amp;quot;, &amp;quot;RstRenderer&amp;quot;, &amp;quot;TextitleRenderer&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // for example, to disable Textile and Pod renderer:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //   &amp;quot;ignored_renderers&amp;quot;: [&amp;quot;TextitleRenderer&amp;quot;, &amp;quot;PodRenderer&amp;quot;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;ignored_renderers&amp;quot;: [&amp;quot;LiterateHaskellRenderer&amp;quot;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Enable MathJax (http://www.mathjax.org/)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // MathJax javascript libraries will downloaded automatically, it may take some while.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // When MathJax is properly installed into OmniMarkupPreviewer/public/mathjax, you&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //   have to reload your browser to get mathjax work.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // KNOWN ISSUES:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //   * It may be slow base on your computer/browser performance, so you may want to&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //     tune the following options:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //         &amp;quot;ajax_polling_interval&amp;quot;, &amp;quot;refresh_on_modified&amp;quot; and &amp;quot;refresh_on_modified_delay&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;mathjax_enabled&amp;quot;: false,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // Custom options for exporting&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;export_options&amp;quot; : &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // follow &amp;quot;html_template_name&amp;quot; rules&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // Built-in templates: github-export, github-v1-export&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;quot;template_name&amp;quot;: &amp;quot;github-export&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // &amp;quot;.&amp;quot;:  export to the same folder as markup file.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // null: export to system temp folder.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // NOTE: folder shall exist, or it will fallback to system temp folder.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;quot;target_folder&amp;quot;: &amp;quot;.&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // format string for filename timestamp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;quot;timestamp_format&amp;quot; : &amp;quot;_%y%m%d%H%M%S&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;quot;copy_to_clipboard&amp;quot;: false,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // Open with default browser or whatever customized in &amp;quot;browser_command&amp;quot;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;quot;open_after_exporting&amp;quot;: false&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    // MarkdownRenderer options&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;quot;renderer_options-MarkdownRenderer&amp;quot;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // Valid extensions:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // - OFFICIAL (Python Markdown) -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;extra&amp;quot;: Combines [&amp;quot;abbr&amp;quot;, &amp;quot;attr_list&amp;quot;, &amp;quot;def_list&amp;quot;, &amp;quot;fenced_code&amp;quot;, &amp;quot;footnotes&amp;quot;, &amp;quot;tables&amp;quot;, &amp;quot;smart_strong&amp;quot;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //            For PHP Markdown Extra(http://michelf.ca/projects/php-markdown/extra/)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;abbr&amp;quot;: http://packages.python.org/Markdown/extensions/abbreviations.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;attr_list&amp;quot;: http://packages.python.org/Markdown/extensions/attr_list.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;def_list&amp;quot;: http://packages.python.org/Markdown/extensions/definition_lists.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;fenced_code&amp;quot;: http://packages.python.org/Markdown/extensions/fenced_code_blocks.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;footnotes&amp;quot;: http://packages.python.org/Markdown/extensions/footnotes.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;tables&amp;quot;: http://packages.python.org/Markdown/extensions/tables.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;smart_strong&amp;quot;: http://packages.python.org/Markdown/extensions/smart_strong.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;codehilite&amp;quot;: http://packages.python.org/Markdown/extensions/code_hilite.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;meta&amp;quot;: http://packages.python.org/Markdown/extensions/meta_data.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;toc&amp;quot;: http://packages.python.org/Markdown/extensions/toc.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;nl2br&amp;quot;: http://packages.python.org/Markdown/extensions/nl2br.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        // - 3RD PARTY -&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;strikeout&amp;quot;: Strikeout extension syntax - `This ~~is deleted text.~~`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;subscript&amp;quot;: Subscript extension syntax - `This is water: H~2~O`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;superscript&amp;quot;: Superscript extension syntax 0 `2^10^ = 1024`&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //   &amp;quot;smarty&amp;quot; or &amp;quot;smartypants&amp;quot;: Python-Markdown extension using smartypants to emit&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //                   typographically nicer (&amp;quot;curly&amp;quot;) quotes, proper&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //                   (&amp;quot;em&amp;quot; and &amp;quot;en&amp;quot;) dashes, etc.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //                   See: http://daringfireball.net/projects/smartypants/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        //                   And: https://github.com/waylan/Python-Markdown/blob/master/docs/extensions/smarty.txt&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;quot;extensions&amp;quot;: [&amp;quot;tables&amp;quot;, &amp;quot;strikeout&amp;quot;, &amp;quot;fenced_code&amp;quot;, &amp;quot;codehilite&amp;quot;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中比较有用的设置包括设置默认预览浏览器（如果你默认是Safari而你想使用Chrome的话）。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;browser_command&amp;quot;: [&amp;quot;open&amp;quot;, &amp;quot;-a&amp;quot;, &amp;quot;Google Chrome&amp;quot;, &amp;quot;&amp;#123;url&amp;#125;&amp;quot;],&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是OmniMarkupPreviewer几个常用快捷键:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Command +Option +O: 在浏览器中预览&lt;/li&gt;
&lt;li&gt;Command+Option+X: 导出HTML&lt;/li&gt;
&lt;li&gt;Ctrl+Alt+C: HTML标记拷贝至剪贴板&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其预览效果要比MOU右侧预览效果好，而且打开浏览器一边编辑浏览器一边会自动更新编辑内容，是不是很赞。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;from-Mou-to-sublime&quot;&gt;&lt;a href=&quot;#from-Mou-to-sublime&quot; class=&quot;headerlink&quot; title=&quot;from Mou to sublime&quot;&gt;&lt;/a&gt;from Mou to sublime&lt;/h2&gt;&lt;p&gt;markdown这种轻量级标记语言被多数科技公司作为主流文档编辑语言，使用起来也是灰常方便。笔者在mac上编写markdown语言原来主要使用&lt;a href=&quot;http://25.io/mou/&quot;&gt;MOU&lt;/a&gt;，但是日前osX升级到10.12.2后mou突然抽风不能使用。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kyler.wang/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>转载-Python 脚本帮你找出微信上删除你好友的人</title>
    <link href="http://kyler.wang/2016/08/02/%E8%BD%AC%E8%BD%BD-Python-%E8%84%9A%E6%9C%AC%E5%B8%AE%E4%BD%A0%E6%89%BE%E5%87%BA%E5%BE%AE%E4%BF%A1%E4%B8%8A%E5%88%A0%E9%99%A4%E4%BD%A0%E5%A5%BD%E5%8F%8B%E7%9A%84%E4%BA%BA/"/>
    <id>http://kyler.wang/2016/08/02/转载-Python-脚本帮你找出微信上删除你好友的人/</id>
    <published>2016-08-02T08:09:19.000Z</published>
    <updated>2016-12-29T07:19:12.000Z</updated>
    
    <content type="html">&lt;p&gt;前两天朋友圈被一篇文章《黑科技，Python 脚本帮你找出微信上删除你好友的人》刷屏了。 这篇文章说道，以为Github上的大神Ox5e利用Python写了一个脚本自动帮你测试哪些好友把你删了，并且不会打扰到对方。 这个项目在Github上短短几天时间就获取到了3000多个Star。 这是什么概念？ 如果你在Github上获得了100个Star，去腾讯应聘的话可以免掉笔试。 Python最出名的Web框架django一共有17000多个Star。 很多朋友很奇怪这是这么实现的了？ 笔者在读完他的源码后，大概了解了背后的原理。 下面就跟着笔者一起来揭秘这个背后的原理吧！ 原理就是用微信网页版的接口，新建群组,如果加不进来就是被删好友了(不要在群组里讲话,别人是看不见的) 具体的技术上的实现原理如下： &lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;获取uuid&quot;&gt;&lt;a href=&quot;#获取uuid&quot; class=&quot;headerlink&quot; title=&quot;获取uuid&quot;&gt;&lt;/a&gt;获取uuid&lt;/h2&gt;&lt;p&gt;打开&lt;a href=&quot;https://wx.qq.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Web版微信&lt;/a&gt;，使用chrome的审查元素，查看network请求，可以找到&lt;code&gt;jslogin&lt;/code&gt;请求，如下图，这个请求返回&lt;code&gt;QRLogin&lt;/code&gt;的uuid，正是生成二维码登陆的必要参数。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/785cd1e3gw1ezvluv3ebuj20kr03vgmk.jpg&quot; alt=&quot;&quot;&gt; &lt;img src=&quot;http://ww2.sinaimg.cn/large/785cd1e3gw1ezvlw2forfj20n0049q3j.jpg&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h2 id=&quot;获取登陆二维码&quot;&gt;&lt;a href=&quot;#获取登陆二维码&quot; class=&quot;headerlink&quot; title=&quot;获取登陆二维码&quot;&gt;&lt;/a&gt;获取登陆二维码&lt;/h2&gt;&lt;p&gt;拿到uuid之后，我们直接访问带uuid的链接即可获取登陆二维码 链接如下: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://login.weixin.qq.com/qrcode/Iamuwcej-Q==
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;登陆&quot;&gt;&lt;a href=&quot;#登陆&quot; class=&quot;headerlink&quot; title=&quot;登陆&quot;&gt;&lt;/a&gt;登陆&lt;/h2&gt;&lt;p&gt;当我们拿起手机扫二维码的时候，我们发现，微信web端发起一个请求&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://ww3.sinaimg.cn/large/785cd1e3gw1ezvlwpiw2xj20n705sdgs.jpg&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;p&gt;并进入等待状态，当我们手机按下确认登陆按钮是，Web端登陆成功，并返回登陆成功。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://ww1.sinaimg.cn/large/785cd1e3gw1ezvlx98tcej20on03e74m.jpg&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;p&gt;访问redirect_uri，即可获得，登陆信息 &lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://ww3.sinaimg.cn/large/785cd1e3gw1ezvlxumtnyj20n6080gn3.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://ww1.sinaimg.cn/large/785cd1e3gw1ezvlyt98ywj21ak09awh1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;初始化页面&quot;&gt;&lt;a href=&quot;#初始化页面&quot; class=&quot;headerlink&quot; title=&quot;初始化页面&quot;&gt;&lt;/a&gt;初始化页面&lt;/h2&gt;&lt;p&gt;拿到上面的信息之后，需要初始化微信界面，微信是通过以下方式初始化的 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/785cd1e3gw1ezvlz8q3q6j20fe03ymxq.jpg&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;p&gt;初始化的之后，可以获得当前用户信息 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/785cd1e3gw1ezvlzqk2t1j20l006hgn4.jpg&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h2 id=&quot;获取联系人&quot;&gt;&lt;a href=&quot;#获取联系人&quot; class=&quot;headerlink&quot; title=&quot;获取联系人&quot;&gt;&lt;/a&gt;获取联系人&lt;/h2&gt;&lt;p&gt;这时候点击已经登陆的页面的查看过联系人，可以发现，会有以下请求，返回结果可以得到所有联系人（包括公众号/服务号，群聊，联系人等等），筛选出所有联系人即可。 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/785cd1e3gw1ezvm03s373j20r105xwf6.jpg&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;h2 id=&quot;创建群聊&quot;&gt;&lt;a href=&quot;#创建群聊&quot; class=&quot;headerlink&quot; title=&quot;创建群聊&quot;&gt;&lt;/a&gt;创建群聊&lt;/h2&gt;&lt;p&gt;手动点击创建群聊，并选中部分好友，会有以下请求： 创建群聊 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/785cd1e3gw1ezvm0kjq7bj20qq078myc.jpg&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;p&gt;添加好友 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/785cd1e3gw1ezvm12q4e4j20r0070abo.jpg&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;p&gt;通过返回状态码，即可判断是否被删除（MemberStatus=4，表示被对方删除）如下图： &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/785cd1e3gw1ezvm1hc503j20vi076gmu.jpg&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;p&gt;最后，要说的是，查询的结果会引起心理上的不适，请谨慎使用（刚发现十几个女生都把我删了，不说了，让我去哭一会）&lt;/p&gt;
&lt;p&gt;参考： &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/xiangzhai/qwx/blob/master/doc/protocol.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/xiangzhai/qwx/blob/master/doc/protocol.md&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/0x5e/wechat-deleted-friends/blob/master/wdf.py&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/0x5e/wechat-deleted-friends/blob/master/wdf.py&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前两天朋友圈被一篇文章《黑科技，Python 脚本帮你找出微信上删除你好友的人》刷屏了。 这篇文章说道，以为Github上的大神Ox5e利用Python写了一个脚本自动帮你测试哪些好友把你删了，并且不会打扰到对方。 这个项目在Github上短短几天时间就获取到了3000多个Star。 这是什么概念？ 如果你在Github上获得了100个Star，去腾讯应聘的话可以免掉笔试。 Python最出名的Web框架django一共有17000多个Star。 很多朋友很奇怪这是这么实现的了？ 笔者在读完他的源码后，大概了解了背后的原理。 下面就跟着笔者一起来揭秘这个背后的原理吧！ 原理就是用微信网页版的接口，新建群组,如果加不进来就是被删好友了(不要在群组里讲话,别人是看不见的) 具体的技术上的实现原理如下： &lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kyler.wang/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>Java编程最佳实践</title>
    <link href="http://kyler.wang/2016/07/19/Java%E7%BC%96%E7%A8%8B%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    <id>http://kyler.wang/2016/07/19/Java编程最佳实践/</id>
    <published>2016-07-19T11:47:58.000Z</published>
    <updated>2016-12-29T07:19:21.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;转自喜马拉雅军校第一期班&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;本文示例为了突出重点，没有写参数检验等代码，在实际项目中不要忽略。&lt;/li&gt;
&lt;li&gt;本文重点列举Java语言和标准库上的通用优化建议，遵循这些建议可以在不改变系统框架和设计的情况下减少错误，提高效率。系统级优化需要对性能做全面的监测和分析，没有通用方法，本文涉及不多，建议阅读专业的Java性能优化相关资料。&lt;/li&gt;
&lt;li&gt;代码首先要符合规范，保证可读性，在此基础上再优化。&lt;/li&gt;
&lt;/ol&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h2&gt;&lt;h4 id=&quot;多用基本类型，少用封装类型&quot;&gt;&lt;a href=&quot;#多用基本类型，少用封装类型&quot; class=&quot;headerlink&quot; title=&quot;多用基本类型，少用封装类型&quot;&gt;&lt;/a&gt;多用基本类型，少用封装类型&lt;/h4&gt;&lt;p&gt;只在需要使用对象时使用封装类型（如表示null，用于泛型）。&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 封装类型比基本类型占用更多的内存空间
2. 封装类型使用时需要判断是否为null
3. 拆装箱有性能损失
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 当getInteger为null时randomNumber可能会抛异常
Integer getInteger(){...}
Integer randomNumber() {
    return random.nextBoolean() ? 1 : getInteger(); 
}

// 不断创建Integer，效率低
Integer sum = 0;
for (int i = 0; i &amp;lt; Integer.MAX_VALUE; i++) {
    sum += i;
}

// 封装类型比较时的异常行为 
Integer i1 = 1234;
Integer i2 = 1234;
// false 数值比较，i1.intValue()不小于i2.intValue()
System.out.println(i1 &amp;lt; i2);
// false 引用一致性比较，i1和i2是不同对象
System.out.println(i1 == i2);
// false 数值比较，i1.intValue()不大于i2.intValue()
System.out.println(i1 &amp;gt; i2);
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;手动装箱时使用valueOf-type-，不用new&quot;&gt;&lt;a href=&quot;#手动装箱时使用valueOf-type-，不用new&quot; class=&quot;headerlink&quot; title=&quot;手动装箱时使用valueOf([type])，不用new&quot;&gt;&lt;/a&gt;手动装箱时使用valueOf([type])，不用new&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Java标准库对整数类型的部分对象做了缓存，使用valueOf可以利用这些缓存减少内存使用量。
例如Integer默认对-128到127之间的对象做了缓存（可以通过jvm参数提高上限）。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// bad
Integer integer2 = new Integer(123);

// good，但代码中没必要这样写，编译器会自动装箱
Integer integer1 = Integer.valueOf(123);
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;使用parseType-，不用valueOf-String&quot;&gt;&lt;a href=&quot;#使用parseType-，不用valueOf-String&quot; class=&quot;headerlink&quot; title=&quot;使用parseType\，不用valueOf(String)&quot;&gt;&lt;/a&gt;使用parse&lt;a href=&quot;String&quot;&gt;Type\&lt;/a&gt;，不用valueOf(String)&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;parse[Type](String)返回的是基本类型，valueOf(String)返回的是封装类型，所以需要基本类型时使用parse\[Type\]性能比较好；
在需要封装类型时，使用valueOf也不会带来性能提升，因为java编译器会做自动装箱，valueOf只是将自动装箱显式化。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// bad
int i2 = Integer.valueOf(&amp;quot;123&amp;quot;);

// good
int i1 = Integer.parseInt(&amp;quot;123&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;不用-比较浮点数&quot;&gt;&lt;a href=&quot;#不用-比较浮点数&quot; class=&quot;headerlink&quot; title=&quot;不用==比较浮点数&quot;&gt;&lt;/a&gt;不用==比较浮点数&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;float和double在计算机中不是精确存储的，直接用==比较会出现与预期结果不一样的情况。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;double d1 = 0.01D;
double d2 = 0.01F;
// false
System.out.println(d1 == d2);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;实践：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//使用BigDecimal精确表示浮点数 或 设置误差范围
boolean equals(double d1, double d2) {
    return Math.abs(d1 - d2) &amp;lt; 0.0001;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;使用BigDecimal时注意小数位数&quot;&gt;&lt;a href=&quot;#使用BigDecimal时注意小数位数&quot; class=&quot;headerlink&quot; title=&quot;使用BigDecimal时注意小数位数&quot;&gt;&lt;/a&gt;使用BigDecimal时注意小数位数&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;小数位是BigDecimal的组成部分，小数位会影响BigDecimal比较结果。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;BigDecimal decimal1 = new BigDecimal(&amp;quot;0.01&amp;quot;);
BigDecimal decimal2 = new BigDecimal(&amp;quot;0.010&amp;quot;);
// false
System.out.println(decimal1.equals(decimal2));
// true
System.out.println(decimal1.equals(decimal2.setScale(2)));
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h2&gt;&lt;h4 id=&quot;不要重复创建String对象&quot;&gt;&lt;a href=&quot;#不要重复创建String对象&quot; class=&quot;headerlink&quot; title=&quot;不要重复创建String对象&quot;&gt;&lt;/a&gt;不要重复创建String对象&lt;/h4&gt;&lt;p&gt;使用双引号（””）包围的字符串本身就是一个String对象，由于String是不可变的，所以可以直接使用，不要再用new String去创建新对象。&lt;/p&gt;
&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// bad
String s = new String(&amp;quot;abc&amp;quot;);
// good
String s = &amp;quot;abc&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;使用StringBuilder连接字符串&quot;&gt;&lt;a href=&quot;#使用StringBuilder连接字符串&quot; class=&quot;headerlink&quot; title=&quot;使用StringBuilder连接字符串&quot;&gt;&lt;/a&gt;使用StringBuilder连接字符串&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;使用+连接字符串时每使用一次+会重新构造一个String（简单情况下可能会优化为使用StringBuilder），
涉及多次数组复制，效率很低，StringBuilder使用动态增长的数组存储字符，效率高。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// bad
String join(List&amp;lt;String&amp;gt; list) {
    String joined = &amp;quot;&amp;quot;;
    for (String s : list) {
        joined += s;
    }
    return joined;
}

// good
String join(List&amp;lt;String&amp;gt; list) {
    StringBuilder joinedBuilder = new StringBuilder();
    for (String s : list) {
        joinedBuilder.append(s);
    }
    return joinedBuilder.toString();
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;使用StringBuilder时，如果可能，指定容量&quot;&gt;&lt;a href=&quot;#使用StringBuilder时，如果可能，指定容量&quot; class=&quot;headerlink&quot; title=&quot;使用StringBuilder时，如果可能，指定容量&quot;&gt;&lt;/a&gt;使用StringBuilder时，如果可能，指定容量&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果不指定容量，StringBuilder容量动态增加，涉及到创建临时数组和数组复制，影响性能。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;String repeat(String string, int count) {
    StringBuilder buffer = new StringBuilder(string.length() * count);
    for(int i = 0; i &amp;lt; count; i++) {
        buffer.append(string);
    }
    return buffer.toString();
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;不要用String代替其他类型&quot;&gt;&lt;a href=&quot;#不要用String代替其他类型&quot; class=&quot;headerlink&quot; title=&quot;不要用String代替其他类型&quot;&gt;&lt;/a&gt;不要用String代替其他类型&lt;/h4&gt;&lt;p&gt;从IO或者远程调用得到String后，如果可能，应先转为合适的类型再做后续处理；在程序内部，除了日志、前后端交互等必须使用String的场景外，应避免将其他类型对象转为String后再做处理。&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. String更占空间
2. String丢失了数据的原始类型，难做类型校验
3. 对String的处理通常比原数据类型的处理效率更低
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// bad，效率低，费空间
class SimpleCache1 {
    private Map&amp;lt;String, String&amp;gt; map = new HashMap&amp;lt;String, String&amp;gt;();

    public void put(long id1, long id2, String value) {
        map.put(id1 + &amp;quot;&amp;amp;&amp;quot; + id2, value);
    }

    public String get(long id1, long id2) {
        return map.get(id1 + &amp;quot;&amp;amp;&amp;quot; + id2);
    }
}

// good，效率高，省空间
class SimpleCache2 {
    static class Ids {
        private long id1;
        private long id2;

        public Ids(long id1, long id2) {
            this.id1 = id1;
            this.id2 = id2;
        }

        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + (int) (id1 ^ (id1 &amp;gt;&amp;gt;&amp;gt; 32));
            result = prime * result + (int) (id2 ^ (id2 &amp;gt;&amp;gt;&amp;gt; 32));
            return result;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null) {
                return false;
            }
            if (!(obj instanceof Ids)) {
                return false;
            }
            Ids other = (Ids) obj;
            if (id1 != other.id1) {
                return false;
            }
            if (id2 != other.id2) {
                return false;
            }
            return true;
        }
    }

    private Map&amp;lt;Ids, String&amp;gt; map = new HashMap&amp;lt;Ids, String&amp;gt;();

    public void put(long id1, long id2, String value) {
        map.put(new Ids(id1, id2), value);
    }

    public String get(long id1, long id2) {
        return map.get(new Ids(id1, id2));
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;使用预编译的正则表达式&quot;&gt;&lt;a href=&quot;#使用预编译的正则表达式&quot; class=&quot;headerlink&quot; title=&quot;使用预编译的正则表达式&quot;&gt;&lt;/a&gt;使用预编译的正则表达式&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;复杂正则表达式的编译比较耗时
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// bad，每次调用string.replaceAll都会创建Pattern
List&amp;lt;String&amp;gt; replaceAll1(List&amp;lt;String&amp;gt; strings, String regex, String  replacement) {
    List&amp;lt;String&amp;gt; replaced = new ArrayList&amp;lt;String&amp;gt;(strings.size());
    for (String string : strings) {
        replaced.add(string.replaceAll(regex, replacement));
    }
    return replaced;
}

// good
List&amp;lt;String&amp;gt; replaceAll2(List&amp;lt;String&amp;gt; strings, String regex, String replacement) {
    List&amp;lt;String&amp;gt; replaced = new ArrayList&amp;lt;String&amp;gt;(strings.size());
    Pattern pattern = Pattern.compile(regex);
    for (String string : strings) {
        Matcher matcher = pattern.matcher(string);
        replaced.add(matcher.replaceAll(replacement));
    }
    return replaced;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;慎用String-intern&quot;&gt;&lt;a href=&quot;#慎用String-intern&quot; class=&quot;headerlink&quot; title=&quot;慎用String.intern()&quot;&gt;&lt;/a&gt;慎用String.intern()&lt;/h4&gt;&lt;p&gt;String.intern()对两个a.equals(b)的String返回相同的引用，看起来能节省空间，但要慎用，尤其是在java6中。&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. java6中intern字符串池是创建在PermGen上的，PermGen通常设置的比较小，且运行时不可扩展，
   String.intern()容易引起PermGen内存溢出
2. java7和8中intern字符串池是创建在heap上的，但大小是固定的，可以通过jvm参数-XX:StringTableSize修改，
   修改时需要注意选择合适的大小，否则性能会严重退化，建议设置成接近字符串数两倍的一个素数
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h2&gt;&lt;h4 id=&quot;返回值类型为集合时不要返回null，返回空集合&quot;&gt;&lt;a href=&quot;#返回值类型为集合时不要返回null，返回空集合&quot; class=&quot;headerlink&quot; title=&quot;返回值类型为集合时不要返回null，返回空集合&quot;&gt;&lt;/a&gt;返回值类型为集合时不要返回null，返回空集合&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;空集合和非空集合使用方法一致，null需要做特判，增加代码复杂度。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;使用Collections创建小集合&quot;&gt;&lt;a href=&quot;#使用Collections创建小集合&quot; class=&quot;headerlink&quot; title=&quot;使用Collections创建小集合&quot;&gt;&lt;/a&gt;使用Collections创建小集合&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Collections中提供了创建不可变空集合（emptyXxx）和单元素集合（singletonXxx）的工厂方法，使用这些方法创建的小集合省空间，效率高。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; splitToList(String input, String separator) {
    if (input == null) {
        return Collections.emptyList();
    }
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;使用ArrayList等在创建时可指定容量的集合时，如果可能，在创建时指定容量（capacity）&quot;&gt;&lt;a href=&quot;#使用ArrayList等在创建时可指定容量的集合时，如果可能，在创建时指定容量（capacity）&quot; class=&quot;headerlink&quot; title=&quot;使用ArrayList等在创建时可指定容量的集合时，如果可能，在创建时指定容量（capacity）&quot;&gt;&lt;/a&gt;使用ArrayList等在创建时可指定容量的集合时，如果可能，在创建时指定容量（capacity）&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;这类集合通常使用数组保存数据，如果数组填满，会创建一个新数组，将数据复制到新数组中，然后利用新数组存储数据，数组增长过程既费时又费空间。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; joinKeyValue(Map&amp;lt;String, String&amp;gt; map) {
    List&amp;lt;String&amp;gt; result = new ArrayList(map.size());
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;默认使用ArrayList，有特殊需求时使用LinkedList&quot;&gt;&lt;a href=&quot;#默认使用ArrayList，有特殊需求时使用LinkedList&quot; class=&quot;headerlink&quot; title=&quot;默认使用ArrayList，有特殊需求时使用LinkedList&quot;&gt;&lt;/a&gt;默认使用ArrayList，有特殊需求时使用LinkedList&lt;/h4&gt;&lt;p&gt;当只使用List接口定义的方法时，使用ArrayList，在有以下需求时使用LinkedList：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 使用Deque接口定义的方法
2. 在List中间频繁执行add或remove操作，这时应使用Iterator或ListIterator顺序访问，不要使用List.add(int,T)和List.remove(int)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. LinkedList比ArrayList更占空间，LinkedList使用Node存储数据，Node中有previous、next引用，都需要占用额外空间
2. ArrayList随机访问速度比LinkedList快
3. LinkedList顺序访问过程中进行add或remove时只需改变部分引用，效率较高
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;使用EnumMap和EnumSet存储enum&quot;&gt;&lt;a href=&quot;#使用EnumMap和EnumSet存储enum&quot; class=&quot;headerlink&quot; title=&quot;使用EnumMap和EnumSet存储enum&quot;&gt;&lt;/a&gt;使用EnumMap和EnumSet存储enum&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. EnumMap使用简单的数组存储value，省空间，效率高
2. EnumSet使用位域存储数据，省空间，效率高
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;去掉不必要的Map-containsKey和Set-contains调用&quot;&gt;&lt;a href=&quot;#去掉不必要的Map-containsKey和Set-contains调用&quot; class=&quot;headerlink&quot; title=&quot;去掉不必要的Map.containsKey和Set.contains调用&quot;&gt;&lt;/a&gt;去掉不必要的Map.containsKey和Set.contains调用&lt;/h4&gt;&lt;p&gt;有些组合操作可以避免使用Map.containsKey和Set.contains，提高效率&lt;br&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Map&amp;lt;K, V&amp;gt; map = new HashMap&amp;lt;K, V&amp;gt;();
// bad，不必要的containsKey
if (map.containsKey(key)) {
    System.out.println(map.get(key).size());
}
// good
V value = map.get(key);
if (value != null) {
    System.out.println(value.size());
}

Map&amp;lt;K, List&amp;lt;V&amp;gt;&amp;gt; listMap = new HashMap&amp;lt;K, List&amp;lt;V&amp;gt;&amp;gt;();
// bad，不必要的containsKey
if (!listMap.containsKey(k)) {
    listMap.put(k, new ArrayList&amp;lt;V&amp;gt;());
}
listMap.get(k).add(v);
// good
List&amp;lt;V&amp;gt; list = listMap.get(k);
if (list == null) {
    list = new ArrayList();
    listMap.put(k, list);
}
list.add(v);

Set&amp;lt;V&amp;gt; set = new HashSet&amp;lt;V&amp;gt;();
// bad，不必要的contains
if (!set.contains(value)) {
    set.add(value);
    // do something
}
// good
if (set.add(value)){
    // do something
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;Key插入Hash集合后确保hashCode的值不变&quot;&gt;&lt;a href=&quot;#Key插入Hash集合后确保hashCode的值不变&quot; class=&quot;headerlink&quot; title=&quot;Key插入Hash集合后确保hashCode的值不变&quot;&gt;&lt;/a&gt;Key插入Hash集合后确保hashCode的值不变&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;改变hashCode值后可能会找不到原来插入的值。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;默认使用Hash-Map-Set&quot;&gt;&lt;a href=&quot;#默认使用Hash-Map-Set&quot; class=&quot;headerlink&quot; title=&quot;默认使用Hash[ Map,Set ]&quot;&gt;&lt;/a&gt;默认使用Hash[ Map,Set ]&lt;/h4&gt;&lt;p&gt;在没有其他需求时默认使用Hash[ Map,Set ]，需要有序时使用TreeMap，需要按插入顺序有序时使用LinkedHashMap，需要并发时使用ConcurrentHashMap。&lt;br&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;基于Hash的实现在大部分情况下性能都比较好。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;不要在for-中修改集合&quot;&gt;&lt;a href=&quot;#不要在for-中修改集合&quot; class=&quot;headerlink&quot; title=&quot;不要在for( : )中修改集合&quot;&gt;&lt;/a&gt;不要在for( : )中修改集合&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;会对集合创建多个Iterator，导致抛ConcurrentModificationException
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// bad
for (int i : list) {
    if (i % 10 == 0) {
        list.remove(i);
    }
}
// good
for (Iterator&amp;lt;Integer&amp;gt; iterator = list.iterator(); iterator.hasNext();) {
    int i = iterator.next();
    if (i % 10 == 0) {
        iterator.remove();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;考虑使用BitSet&quot;&gt;&lt;a href=&quot;#考虑使用BitSet&quot; class=&quot;headerlink&quot; title=&quot;考虑使用BitSet&quot;&gt;&lt;/a&gt;考虑使用BitSet&lt;/h4&gt;&lt;p&gt;当需要使用Set&amp;lt;[Integer,Short,Byte,Char]&amp;gt;并且数据集中在较小范围内时，可以使用BitSet代替。&lt;br&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. BitSet使用位域实现存储，省空间
2. BitSet使用位操作实现功能，效率高
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// 简单的分段BitSet，存储分段密集的数字时节省空间
class SimpleIntSet {
    private static final int VALUE_BITS = 10;
    private static final int VALUE_MASK = (1 &amp;lt;&amp;lt; VALUE_BITS) - 1;
    private Map&amp;lt;Integer, BitSet&amp;gt; bitSetMap = new HashMap&amp;lt;Integer, BitSet&amp;gt;();

    public void add(int value) {
        int key = getKey(value);
        BitSet set = bitSetMap.get(key);
        if (set == null) {
            set = new BitSet(VALUE_MASK + 1);
            bitSetMap.put(key, set);
        }
        set.set(getBitIndex(value));
    }

    public void remove(int value) {
        BitSet set = bitSetMap.get(getKey(value));
        if (set != null) {
            set.clear(getBitIndex(value));
        }
    }

    public boolean contains(int value) {
        BitSet set = bitSetMap.get(getKey(value));
        return set == null || set.get(getBitIndex(value));
    }

    private int getBitIndex(int value) {
        return value &amp;amp; VALUE_MASK;
    }

    private int getKey(int value) {
        return value &amp;gt;&amp;gt; VALUE_BITS;
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;谨慎使用数组的equals和hashCode&quot;&gt;&lt;a href=&quot;#谨慎使用数组的equals和hashCode&quot; class=&quot;headerlink&quot; title=&quot;谨慎使用数组的equals和hashCode&quot;&gt;&lt;/a&gt;谨慎使用数组的equals和hashCode&lt;/h4&gt;&lt;p&gt;数组的equals和hashCode是Object中的默认实现，大部分情况下都不满足需求。需要使用equals和hashCode时，可以使用Buffer封装（基本类型数组），利用Arrays中提供的静态方法，使用Arrays.asList封装为List。&lt;/p&gt;
&lt;h4 id=&quot;使用Arrays操作数组&quot;&gt;&lt;a href=&quot;#使用Arrays操作数组&quot; class=&quot;headerlink&quot; title=&quot;使用Arrays操作数组&quot;&gt;&lt;/a&gt;使用Arrays操作数组&lt;/h4&gt;&lt;p&gt;Java数组本身提供的方法很少，Arrays中提供了toString、equals、hashCode、copy操作数组的静态方法，可以利用这些方法方便地使用数组。&lt;br&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// copyOfRange
int[] shiftLeft(int[] original, int shiftLength) {
    int from = Math.min(original.length, shiftLength);
    int to = from + original.length;
    return Arrays.copyOfRange(original, from, to);
}
// deepToString
int[][][] threeDArray = new int[][][]{{{1,2,3},{4}},{{5},{6,7}}};
System.out.println(Arrays.deepToString(threeDArray));
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;使用第三方库提升效率&quot;&gt;&lt;a href=&quot;#使用第三方库提升效率&quot; class=&quot;headerlink&quot; title=&quot;使用第三方库提升效率&quot;&gt;&lt;/a&gt;使用第三方库提升效率&lt;/h4&gt;&lt;p&gt;在Java标准库中提供的集合在空间和时间复杂度上不能满足需求时，可以尝试trove等第三方库。&lt;br&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. Java标准集合都是使用范型实现的，当存储数据为基本类型时需要封装，有额外的空间和性能消耗
2. Java标准库中常用的Set（HashSet，TreeSet，LinkedHashSet）是封装Map实现的，Map中value所占的空间被浪费了
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;并发&quot;&gt;&lt;a href=&quot;#并发&quot; class=&quot;headerlink&quot; title=&quot;并发&quot;&gt;&lt;/a&gt;并发&lt;/h2&gt;&lt;h4 id=&quot;Lazy-initialization&quot;&gt;&lt;a href=&quot;#Lazy-initialization&quot; class=&quot;headerlink&quot; title=&quot;Lazy initialization&quot;&gt;&lt;/a&gt;Lazy initialization&lt;/h4&gt;&lt;p&gt;Java中常用的Lazy initialization方式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//使用静态辅助类
class SomeClass {
    private static class InstanceHolder {
        static SomeClass instance = new SomeClass();
    }

    public static SomeClass getInstance() {
        return InstanceHolder.instance;
    }
}

//使用volatile的double check
class SomeFactory {
    // 注意必须有volatile
    private volatile SomeClass someObject;

    public SomeClass getSomeObject() {
        if (someObject == null) {
            synchronized (this) {
                if (someObject == null) {
                    someObject = new SomeClass();
                }
            }
        }
        return someObject;
    }
}

// 使用final的double check
class FinalWrapper&amp;lt;T&amp;gt; {
    // 注意必须有final
    private final T value;

    FinalWrapper(T value) {
        this.value = value;
    }

    T getValue() {
        return value;
    }
}

class SomeFactory {
    private FinalWrapper&amp;lt;SomeClass&amp;gt; finalWrapper;

    public SomeClass getSomeObject() {
        if (finalWrapper == null) {
            synchronized (this) {
                if (finalWrapper == null) {
                    finalWrapper = new FinalWrapper&amp;lt;SomeClass&amp;gt;(new SomeClass());
                }
            }
        }
        return finalWrapper.getValue();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####优先使用ConcurrentMap&lt;br&gt;需要并发Map时优先使用ConcurrentMap，包括无序的ConcurrentHashMap和有序的ConcurrentSkipListMap。&lt;/p&gt;
&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. ConcurrentMap内部使用锁分段等并发优化技术实现，在高并发情况下比简单的使用锁封装map以及使用Collections.synchronizedMap效率高
2. ConcurrentMap有compare and set方式的putIfAbsent、remove、replace原子操作，可以简化并发程序实现方式
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// “如果map中有key，返回value；如果没有，新建一个value，放入map中，然后返回”功能的安全高效实现
Value createIfAbsent(ConcurrentMap&amp;lt;Key, Value&amp;gt; map, Key key) {
    Value value = map.get(key);
    if (value != null) {
        return value;
    }
    value = new Value();
    Value oldValue = map.putIfAbsent(key, value);
    if (oldValue != null) {
        return oldValue;
    } else {
        return value;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####考虑使用CopyOnWrite集合&lt;br&gt;当集合的读远多于写时可以考虑使用CopyOnWrite集合，java标准库中提供了CopyOnWriteArrayList和CopyOnWriteArraySet。&lt;br&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CopyOnWrite集合的读操作未加锁，效率高
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;优先使用线程池（Executor）&quot;&gt;&lt;a href=&quot;#优先使用线程池（Executor）&quot; class=&quot;headerlink&quot; title=&quot;优先使用线程池（Executor）&quot;&gt;&lt;/a&gt;优先使用线程池（Executor）&lt;/h4&gt;&lt;p&gt;在创建线程时优先考虑使用线程池，而不是直接创建Thread。&lt;br&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 使用线程池便于控制线程数
2. 使用线程池便于对任务进行统一管理
3. 使用线程池可以复用线程，减少创建、销毁线程的开支
4. 利用Future可以方便地进行异步调用和超时控制
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意在使用线程池时ThreadLocal等属于线程的资源也会被复用。&lt;/p&gt;
&lt;p&gt;####优先使用Atomic[Type]&lt;br&gt;java.util.concurrent.atomic提供了部分基本类型及其数组的Atomic封装，在并发环境下应当优先使用。&lt;br&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. Atomic使用volatile语义及底层compareAndSet实现，高并发情况下效率比直接用锁高
2. 提供了原子的[update]AndGet以及getAnd[Update]方法，效率高，使用方便
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####选择合适的锁&lt;br&gt;默认使用synchronized，需要更多控制时使用ReentrantLock，读多于写时考虑使用ReentrantReadWriteLock。&lt;br&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. synchronized用法最简单，不容易出错
2. ReentrantLock比synchronized功能更多（处理中断，tryLock，多个condition...）
3. ReentrantReadWriteLock读写锁分离，可并发读
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;##IO&lt;/p&gt;
&lt;p&gt;####指定编码&lt;br&gt;涉及流（stream、byte）和字符（char、String）转换的地方一定要指定编码。&lt;br&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;如果不指定编码，程序会使用默认编码，默认编码在开发机、测试机、线上环境可能不一样，引发难以测试和复现的问题
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;byte[] bytes = ...
// bad
String s = new String(bytes);
// good
String s = new String(bytes, Charset.forName(&amp;quot;utf-8&amp;quot;));

// bad，不要用FileReader，因为无法指定编码
BufferedReader reader = new BufferedReader(new FileReader(&amp;quot;/home/work/somefile&amp;quot;));
// good
BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(&amp;quot;/home/work/somefile&amp;quot;), Charset.forName(&amp;quot;utf-8&amp;quot;)));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####合理使用ByteArrayOutputStream&lt;br&gt;ByteArrayOutputStream有以下缺点，使用时需要注意：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. write方法是synchronized方法，影响性能
2. toByteArray会复制一个新的byte数组，影响性能，占用空间
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在使用时可以采取如下方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 如果byte数组长度已知，不要使用ByteArrayOutputStream，使用ByteBuffer
2. 如果byte数组需要输出到一个stream，使用ByteArrayOutputStream.writeTo(OutputStream stream)
3. 如果byte数组需要转成字符串，使用ByteArrayOutputStream.toString(String charsetName)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;及时关闭IO资源&quot;&gt;&lt;a href=&quot;#及时关闭IO资源&quot; class=&quot;headerlink&quot; title=&quot;及时关闭IO资源&quot;&gt;&lt;/a&gt;及时关闭IO资源&lt;/h4&gt;&lt;p&gt;使用完IO资源后应该尽快关闭，否则会引起资源泄漏，资源关闭需要在finally里面进行，有些资源关闭时会抛IOException，在不关注这个异常时推荐使用org.apache.commons.io.IOUtils.closeQuietly方法。&lt;/p&gt;
&lt;h4 id=&quot;不要一次把大文件的所有内容都读入内存&quot;&gt;&lt;a href=&quot;#不要一次把大文件的所有内容都读入内存&quot; class=&quot;headerlink&quot; title=&quot;不要一次把大文件的所有内容都读入内存&quot;&gt;&lt;/a&gt;不要一次把大文件的所有内容都读入内存&lt;/h4&gt;&lt;p&gt;这样容易引起OOM，应当分块读入文件，边读边处理。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;File file = new File(&amp;quot;somefile&amp;quot;);
try (BufferedInputStream stream = new BufferedInputStream(new FileInputStream(file))) {
    // bad
    byte[] bytes = new byte[(int) file.length()];
    stream.read(bytes);
    // Do something
}

try (BufferedInputStream stream = new BufferedInputStream(new FileInputStream(file))) {
    // good
    byte[] bytes = new byte[10240];
    int readCount = 0;
    while ((readCount = stream.read(bytes)) != -1) {
        // Do something
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;h4 id=&quot;内存空间紧张的情况下，考虑long类型的毫秒数代替Date对象节省空间&quot;&gt;&lt;a href=&quot;#内存空间紧张的情况下，考虑long类型的毫秒数代替Date对象节省空间&quot; class=&quot;headerlink&quot; title=&quot;内存空间紧张的情况下，考虑long类型的毫秒数代替Date对象节省空间&quot;&gt;&lt;/a&gt;内存空间紧张的情况下，考虑long类型的毫秒数代替Date对象节省空间&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Date只是对毫秒数的简单封装，没有必要创建Date对象再获得毫秒数。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;避免并发使用java-text-SimpleDateFormat&quot;&gt;&lt;a href=&quot;#避免并发使用java-text-SimpleDateFormat&quot; class=&quot;headerlink&quot; title=&quot;避免并发使用java.text.SimpleDateFormat&quot;&gt;&lt;/a&gt;避免并发使用java.text.SimpleDateFormat&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SimpleDateFormat不是线程安全的，建议使用apache commons-lang的FastDateFormat等第三方库。
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;使用不可变对象&quot;&gt;&lt;a href=&quot;#使用不可变对象&quot; class=&quot;headerlink&quot; title=&quot;使用不可变对象&quot;&gt;&lt;/a&gt;使用不可变对象&lt;/h4&gt;&lt;p&gt;不可变对象有以下优点：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 线程安全
2. 可以缓存
3. 可以缓存hashCode等计算结果
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;不要使用异常代替正常执行流程&quot;&gt;&lt;a href=&quot;#不要使用异常代替正常执行流程&quot; class=&quot;headerlink&quot; title=&quot;不要使用异常代替正常执行流程&quot;&gt;&lt;/a&gt;不要使用异常代替正常执行流程&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Java中创建异常需要填充stackTrace，代价非常高，异常应当只用于表示在正常流程之外且很少发生的情况
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;多用final&quot;&gt;&lt;a href=&quot;#多用final&quot; class=&quot;headerlink&quot; title=&quot;多用final&quot;&gt;&lt;/a&gt;多用final&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. jvm更容易对final域及final方法进行优化，提高运行时效率
2. 编译器可以利用final及时提示代码错误
3. 正确初始化的final域在并发环境下可以保证安全发布
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;不要在生产环境使用System-out-print-ln-写日志&quot;&gt;&lt;a href=&quot;#不要在生产环境使用System-out-print-ln-写日志&quot; class=&quot;headerlink&quot; title=&quot;不要在生产环境使用System.out.print[ln]写日志&quot;&gt;&lt;/a&gt;不要在生产环境使用System.out.print[ln]写日志&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. System.out.print[ln]默认输出到控制台，难管理
2. System.out.print[ln]不支持日志分级
3. System.out.print[ln]默认遇到&amp;apos;\n&amp;apos;就会flush，效率较低
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;打日志时不要急于将对象转为String&quot;&gt;&lt;a href=&quot;#打日志时不要急于将对象转为String&quot; class=&quot;headerlink&quot; title=&quot;打日志时不要急于将对象转为String&quot;&gt;&lt;/a&gt;打日志时不要急于将对象转为String&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;日志是有级别的，打印级别低于系统设置级别的日志不会被输出，这些日志提前转为String浪费资源
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// slf4j bad
logger.debug(someLogObject.toString());
logger.debug(&amp;quot;Log object1: &amp;quot; + someLogObject1 + &amp;quot;, object2: &amp;quot; + someLogObject2);
// slf4j good
logger.debug(&amp;quot;{}&amp;quot;, someLogObject);
logger.debug(&amp;quot;Log object1: {}, object2: {}&amp;quot;, someLogObject1, someLogObject2);

// log4j bad
logger.debug(someLogObject.toString());
logger.debug(&amp;quot;Log object1: &amp;quot; + someLogObject1 + &amp;quot;, object2: &amp;quot; + someLogObject2);
// log4j good
logger.debug(someLogObject);
if (logger.isDebugEnabled()) {
    logger.debug(new StringBuilder(&amp;quot;Log object1: &amp;quot;)
            .append(someLogObject1)
            .append(&amp;quot;, object2: &amp;quot;)
            .append(someLogObject2));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从上面的代码可以看出，实现相同的功能log4j比slf4j需要多一次判断，不够简洁，所以不建议直接使用log4j，使用slf4j封装或者使用其他有占位符的日志框架，比如logback。&lt;/p&gt;
&lt;h4 id=&quot;选择性使用&quot;&gt;&lt;a href=&quot;#选择性使用&quot; class=&quot;headerlink&quot; title=&quot;选择性使用==&quot;&gt;&lt;/a&gt;选择性使用==&lt;/h4&gt;&lt;p&gt;对基本类型使用==时，比较的是数据是否完全一致，对引用类型使用==时，比较的是引用地址是否一致，以下情况可以安全地使用==比较是否相等：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 整数基本类型
2. 枚举类型
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其他情况下，==比较的是两者是否为同一对象。java.util.IdentityHashMap是仅使用==比较key是否相等的HashMap，在有些场景下可以用来提高效率。&lt;/p&gt;
&lt;h4 id=&quot;优先使用static成员类&quot;&gt;&lt;a href=&quot;#优先使用static成员类&quot; class=&quot;headerlink&quot; title=&quot;优先使用static成员类&quot;&gt;&lt;/a&gt;优先使用static成员类&lt;/h4&gt;&lt;p&gt;static成员类与非static成员类的区别是非static成员类包含一个外部类的指针，可以访问外部类的非静态资源。当需要使用成员类时，默认使用static成员类，除非需要访问外部类的非静态资源。&lt;br&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 非static内部类占用额外空间存储外部类的引用
2. 非static内部类影响外部类对象的内存回收，可能会引起内存泄漏
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;及时释放对象引用&quot;&gt;&lt;a href=&quot;#及时释放对象引用&quot; class=&quot;headerlink&quot; title=&quot;及时释放对象引用&quot;&gt;&lt;/a&gt;及时释放对象引用&lt;/h4&gt;&lt;p&gt;及时释放对象引用可以让jvm及时释放内存空间，忘记释放对象引用可能会引起内存泄漏。&lt;br&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class SimpleStack {
    private Object[] array = new Object[10];
    private int index = 0;

    public void push(Object value) {
        if (index == array.length) {
            array = Arrays.copyOf(array, array.length * 2);
        }
        array[index++] = value;
    }

    public Object pop() {
        // 这里内存泄漏，需要在返回前将array[index]置为null
        return array[--index];
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;使用enum&quot;&gt;&lt;a href=&quot;#使用enum&quot; class=&quot;headerlink&quot; title=&quot;使用enum&quot;&gt;&lt;/a&gt;使用enum&lt;/h2&gt;&lt;p&gt;使用enum替代常量。&lt;br&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. enum是类型安全的
2. enum可以定义方法，功能强大
3. enum可以使用==进行比较，使用EnumHashMap等工具，效率高
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;举例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class Constants{
    public static final String OS_ANDROID = &amp;quot;Android&amp;quot;;
    public static final String OS_IOS = &amp;quot;iOS&amp;quot;;
}

public enum Os {
    ANDROID(&amp;quot;Android&amp;quot;),
    IOS(&amp;quot;iOS&amp;quot;);

    private String osName;

    private Os(String osName) {
        this.osName = osName;
    }

    public String getOsName() {
        return this.osName;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;慎用enum的ordinal&quot;&gt;&lt;a href=&quot;#慎用enum的ordinal&quot; class=&quot;headerlink&quot; title=&quot;慎用enum的ordinal&quot;&gt;&lt;/a&gt;慎用enum的ordinal&lt;/h4&gt;&lt;p&gt;在程序中要慎用enum的ordinal，尤其在需要持久化的场景，需要使用数字表达时可以用自定义值代替。&lt;br&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 调整常量顺序或者删除常量时ordinal会发生变化
2. ordinal只与常量顺序有关，无法定义有意义的值
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;少用反射&quot;&gt;&lt;a href=&quot;#少用反射&quot; class=&quot;headerlink&quot; title=&quot;少用反射&quot;&gt;&lt;/a&gt;少用反射&lt;/h4&gt;&lt;p&gt;原因：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 反射无法进行编译检查，降低了提早发现问题的可能性，无法方便地发现调用点，增加重构难度
2. 损失性能，反射比正常方法调用要慢
3. 反射代码不如直接调用简洁
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;轮子优先级&quot;&gt;&lt;a href=&quot;#轮子优先级&quot; class=&quot;headerlink&quot; title=&quot;轮子优先级&quot;&gt;&lt;/a&gt;轮子优先级&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;1. 标准库
2. 第三方库
3. 自己造
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;推荐的第三方库&quot;&gt;&lt;a href=&quot;#推荐的第三方库&quot; class=&quot;headerlink&quot; title=&quot;推荐的第三方库&quot;&gt;&lt;/a&gt;推荐的第三方库&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. apache-commons，java.lang的补充，提供了很多辅助工具
2. apache-collections，java集合的补充，提供了很多集合操作工具和新的集合
3. guava，提供了很多集合、并发、缓存等方面的工具
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;推荐阅读&quot;&gt;&lt;a href=&quot;#推荐阅读&quot; class=&quot;headerlink&quot; title=&quot;推荐阅读&quot;&gt;&lt;/a&gt;推荐阅读&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. Effective Java (Second Edition)
2. Java Concurrency in Practice
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转自喜马拉雅军校第一期班&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;本文示例为了突出重点，没有写参数检验等代码，在实际项目中不要忽略。&lt;/li&gt;
&lt;li&gt;本文重点列举Java语言和标准库上的通用优化建议，遵循这些建议可以在不改变系统框架和设计的情况下减少错误，提高效率。系统级优化需要对性能做全面的监测和分析，没有通用方法，本文涉及不多，建议阅读专业的Java性能优化相关资料。&lt;/li&gt;
&lt;li&gt;代码首先要符合规范，保证可读性，在此基础上再优化。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kyler.wang/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>OOAD5大原则理解</title>
    <link href="http://kyler.wang/2016/07/19/OOAD5%E5%A4%A7%E5%8E%9F%E5%88%99%E7%90%86%E8%A7%A3/"/>
    <id>http://kyler.wang/2016/07/19/OOAD5大原则理解/</id>
    <published>2016-07-19T06:26:51.000Z</published>
    <updated>2016-12-29T07:19:25.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;OOAD的5大原则有什么用&quot;&gt;&lt;a href=&quot;#OOAD的5大原则有什么用&quot; class=&quot;headerlink&quot; title=&quot;OOAD的5大原则有什么用?&quot;&gt;&lt;/a&gt;OOAD的5大原则有什么用?&lt;/h2&gt;&lt;p&gt;在聊OOAD的5大原则具体是啥前，先简单介绍下OOAD这些原则有什么用。OOAD出现在上世纪80年代，起因是航天事业的发展第一次出现超10w代码行的软件项目。面对超10w代码行的项目，如果继续采取基于过程的设计形式，开发者很难互相理解并协助。这时出现的面向对象程序设计能够更好地切分项目模块，开发者也方便理解项目代码逻辑，接口更让让协作简化。而本文介绍的这5个原则是OOAD存在和实现的基础，践行这些标准可以最大程度地软件设计质量。这些原则都出自一个出发点，即&lt;code&gt;高内聚&amp;amp;低耦合&lt;/code&gt;。那下面我们就来具体介绍这所谓的OOAD5大原则。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;1-ocp开闭原则&quot;&gt;&lt;a href=&quot;#1-ocp开闭原则&quot; class=&quot;headerlink&quot; title=&quot;1. ocp开闭原则&quot;&gt;&lt;/a&gt;1. ocp开闭原则&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;软件实体对扩展是开放的，但对修改是关闭的，即在不修改一个软件实体的基础上去扩展其功能。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个原则明显是建立在基于接口编程的基础上，在基于接口的编程场景下，接口会在第一时间被建立起来，而业务相关方都会根据这个定义好的接口来开展业务（调用或实现）。而在后续业务不断发展的过程中，接口的实现可能会根据需要进行迭代修改，但是调用方肯定不希望接口的定义改变，这样就需要不断修改调用点。从面向对象的角度上来说，调用方并不关心接口的实现，所以应该尽量采取可扩展的方式定义接口，避免后续因为业务扩展导致接口定义的变化。举个例子，接口设计时会定义入参出参，但有时随着业务的变化我们需要增加更多入参。这是如果我们直接显示地改变原方法入参的个数，可能直接导致原接口不能使用，调用方需要被动配合修改。&lt;/p&gt;
&lt;p&gt;一个比较好的可解决方法是再增加一个多参接口，这符合我们对扩展是开放的，但对修改是关闭的原则。对应老的调用业务也没有任何影响，唯一要做的可能是通知调用方，后续改使用新接口。但这样的缺点就是随着时间推移，大量废弃接口会同时存在于系统上，并且这些仅增加入参的方法必然会产生很多的重复代码，影响系统整体的健壮性和代码美观度。&lt;/p&gt;
&lt;p&gt;与此相比，我更推荐将接口出参入参都设计成对象的方法，这样当接口入参增加时，我们只需增加入参对象属性，这样的方式对接口嵌入性最小，并且不会产生废弃接口和冗余代码。&lt;/p&gt;
&lt;h2 id=&quot;2-srp单一职责原则&quot;&gt;&lt;a href=&quot;#2-srp单一职责原则&quot; class=&quot;headerlink&quot; title=&quot;2. srp单一职责原则&quot;&gt;&lt;/a&gt;2. srp单一职责原则&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;类的职责要单一，不能将太多的职责放在一个类中。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个原则很好理解，一个类里面尽量只包含一项业务。比如我们有一个账户类：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;interface Account&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       // 获取账户id&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       public void getId(); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       // 将账号信息存到数据库&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       public void save2Mysql();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个接口包括两个方法，一个是查看账号id，这个方法和账户类应有业务对应，应该设定在Account类中。而save2Mysql方法的功能是持久化Account对象，和账户类应有业务不相干，应该隔离在Account类外。&lt;/p&gt;
&lt;h2 id=&quot;3-isp接口隔离原则&quot;&gt;&lt;a href=&quot;#3-isp接口隔离原则&quot; class=&quot;headerlink&quot; title=&quot;3. isp接口隔离原则&quot;&gt;&lt;/a&gt;3. isp接口隔离原则&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;使用多个专门的接口来取代一个统一的接口。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现实世界中，我们期待万能的东西，例如物理里的万用表，小说电影里面的万能钥匙等等。但是在软件工程领域，我们应该尽量避免一类多能。接口隔离原则和单一职责原则类似，我们设计接口时尽量隔离业务功能。记得在支付宝实习时，我见到过能够查询并修改一个业务的接口。当需求变更我们需要更新查询的业务逻辑时，修改部分的业务也不可避免地被影响了。最显而易见的后果就是，虽然仅修改了查询，但回归测试不得不把修改也包含进来。&lt;/p&gt;
&lt;h2 id=&quot;4-lsp里式替换原则&quot;&gt;&lt;a href=&quot;#4-lsp里式替换原则&quot; class=&quot;headerlink&quot; title=&quot;4. lsp里式替换原则&quot;&gt;&lt;/a&gt;4. lsp里式替换原则&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;在软件系统中，一个可以接受基类对象的地方必然可以接受一个子类对象。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这一原则字面上有些晦涩，但其实也很好理解。主要需要注意的地方是，当我们的子类复写（override）父类的一个方法时，要注意复写函数的功能要和父类原函数的功能保持一致。比如原来的父类函数是toString，子类方法也要是类型功能，不能突变成查询数据库或是其他。也就是说在一个软件系统中，子类应该能够完全替换任何父类能够出现的地方，并且经过替换后，不会让调用父类的客户程序从行为上有任何改变。&lt;/p&gt;
&lt;h2 id=&quot;5-dip依赖倒置原则&quot;&gt;&lt;a href=&quot;#5-dip依赖倒置原则&quot; class=&quot;headerlink&quot; title=&quot;5. dip依赖倒置原则&quot;&gt;&lt;/a&gt;5. dip依赖倒置原则&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;要针对抽象层编程，而不要针对具体类编程。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这一原则在系统架构层面上非常重要，遵循这一原则的系统更易于维护，不容易受外部系统调用接口的变更而影响。在ocp开闭原则中我们提到，我们要避免接口的变更给外部调用系统带来的不利影响。但实际情况却是，猪队友不是少数，需要配合技改的接口经常出现在我们的需求列表中。&lt;/p&gt;
&lt;p&gt;假设我们在领域模型层的业务逻辑需要调用发送短信服务，所谓针对具体类编程就是指，因为我们已经知道接口的定义和如何使用，我们就任选地在我们的业务逻辑中直接使用短信接口调用短信服务。这样我们的业务代码中大量耦合了短信接口。但猪队友出现，短信接口出现了更改，悲剧随着而来，这时我们只能一个一个地修改这些使用了短信接口的业务逻辑代码点。这种方式地修改，出现错误的概率也非常高。&lt;/p&gt;
&lt;p&gt;最聪明的方法是，我们假定自己不知道短信接口的具体存在和如何调用。我们在我们的系统中自己定义一个短信调用服务的client，通过client提供短信调用的入口和出口，这样只有client出现在我们的业务代码中。一旦再次出现短信接口的更改，现在只有client调用了短信服务，我们只需要修改这一部分，绝大多数业务完全不受影响。随便提一下，这样做的另一一个好处是，我们这编写代码逻辑时，应该秉承这样的原则，所以别人写的东西都不可信任，我们把短信服务封装在client中，在client中进行错误处理。这样很好地保证了我们自己的业务代码不会被短信服务的异常中断。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OOAD的5大原则有什么用&quot;&gt;&lt;a href=&quot;#OOAD的5大原则有什么用&quot; class=&quot;headerlink&quot; title=&quot;OOAD的5大原则有什么用?&quot;&gt;&lt;/a&gt;OOAD的5大原则有什么用?&lt;/h2&gt;&lt;p&gt;在聊OOAD的5大原则具体是啥前，先简单介绍下OOAD这些原则有什么用。OOAD出现在上世纪80年代，起因是航天事业的发展第一次出现超10w代码行的软件项目。面对超10w代码行的项目，如果继续采取基于过程的设计形式，开发者很难互相理解并协助。这时出现的面向对象程序设计能够更好地切分项目模块，开发者也方便理解项目代码逻辑，接口更让让协作简化。而本文介绍的这5个原则是OOAD存在和实现的基础，践行这些标准可以最大程度地软件设计质量。这些原则都出自一个出发点，即&lt;code&gt;高内聚&amp;amp;低耦合&lt;/code&gt;。那下面我们就来具体介绍这所谓的OOAD5大原则。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kyler.wang/categories/program/"/>
    
    
  </entry>
  
  <entry>
    <title>使用Hexo构建Blog</title>
    <link href="http://kyler.wang/2016/07/15/%E4%BD%BF%E7%94%A8Hexo%E6%9E%84%E5%BB%BABlog/"/>
    <id>http://kyler.wang/2016/07/15/使用Hexo构建Blog/</id>
    <published>2016-07-15T08:35:52.000Z</published>
    <updated>2016-12-29T07:18:50.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直吵着要建个博客，积累点自己的东西，但无奈懒癌难医，计划脱了半年之久。巧的是上周公司training的homework就是搭建自己的博客，于是借着这波东风赶鸭子上架，花了2h时间研究了下github快速搭建博客的方法。这里写下使用Hexo搭建Blog的主要流程作为我第一篇文章，需要的拿走不谢。&lt;/p&gt;
&lt;p&gt;另外本文参考了Google上search的一些同类型文章，首先我觉得大家写的都很赞，对这些前辈就不一一感谢了。但是多数文章Hexo和github结合的一些细节表达的还不是特别清楚，导致我读的时候也有些困惑，所以不才大胆对这些资料进行总结精炼，并且对Hexo部署到github page的细节更多说明。&lt;/p&gt;
&lt;p&gt;另外转载请尽量给个面子，标注个作者啥的。实在不愿意心里默默感谢下也算了。╮(╯▽╰)╭&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;为什么要使用Hexo-amp-Github搭建Blog？&quot;&gt;&lt;a href=&quot;#为什么要使用Hexo-amp-Github搭建Blog？&quot; class=&quot;headerlink&quot; title=&quot;为什么要使用Hexo&amp;amp;Github搭建Blog？&quot;&gt;&lt;/a&gt;为什么要使用Hexo&amp;amp;Github搭建Blog？&lt;/h2&gt;&lt;p&gt;这个问题有几个层面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一为什么要搭建自己的Blog？我觉得对于Coder来说使用markdown、git这些语言或工具写文章可以提高效率，目前像博客园或CSDN应该还不能支持。&lt;/li&gt;
&lt;li&gt;第二为啥要用github pages？恩，对应土豪来说自己买服务器也是可以的。对于多数轻量级用户（文章写得少，访问量少）github pages不收费(300MB)方便部署很经济。&lt;/li&gt;
&lt;li&gt;第三为毛要用Hexo？恩（思考ing），同事推荐我马上就用了，另外其他人说相比Jekyll、Octopress来说Hexo更轻便更快捷。。。好吧，其他两个不太熟悉。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;主要步骤&quot;&gt;&lt;a href=&quot;#主要步骤&quot; class=&quot;headerlink&quot; title=&quot;主要步骤&quot;&gt;&lt;/a&gt;主要步骤&lt;/h2&gt;&lt;h3 id=&quot;github创建仓库&quot;&gt;&lt;a href=&quot;#github创建仓库&quot; class=&quot;headerlink&quot; title=&quot;github创建仓库&quot;&gt;&lt;/a&gt;github创建仓库&lt;/h3&gt;&lt;p&gt;不了解github和不知道如何创建仓库（repository）的请参考&lt;a href=&quot;https://guides.github.com/activities/hello-world/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://guides.github.com/activities/hello-world/&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xve7o.com1.z0.glb.clouddn.com/16-7-15/55032611.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;据传说repository name必须是github的username.github.io，我就是照着做的，大家可以试试不这样（期待脸）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xve7o.com1.z0.glb.clouddn.com/16-7-15/26390887.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;创建好仓库后再setting tag中点击Launch automatic page generator，如上图。这时你访问username.github.io就可以看到github pages自动生成的静态页面网站。是不是很有成就感？然而对于使用Hexo的同学来说这步并没有什么卵用。&lt;/p&gt;
&lt;h3 id=&quot;安装Node-JS&quot;&gt;&lt;a href=&quot;#安装Node-JS&quot; class=&quot;headerlink&quot; title=&quot;安装Node.JS&quot;&gt;&lt;/a&gt;安装Node.JS&lt;/h3&gt;&lt;p&gt;这一步是按照Hexo的前期准备，其实前面貌似还有一步安装git，恩。。。。。。好吧，我们忽略没有安装git的同学。&lt;/p&gt;
&lt;p&gt;安转nodejs直接到&lt;a href=&quot;https://nodejs.org/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodejs官网&lt;/a&gt;直接下载安装包点击安装。需要注意是国内建议更换taobao的npm源，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install -g cnpm --registry=https://registry.npm.taobao.org&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install -g hexo&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;仅仅一条命令就是这么简单，这么屌。&lt;/p&gt;
&lt;p&gt;然后你可能需要安转一些插件，比较重要的是git自动部署插件。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-deployer-git --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我是参考网上的教程，也装了些其他的，下面列出来，需不需要大家自己研究咯。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-generator-index --save&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-generator-archive --save&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-generator-category --save&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-generator-tag --save&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-server --save&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-deployer-heroku --save&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-deployer-rsync --save&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-deployer-openshift --save&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-renderer-marked@0.2 --save&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-renderer-stylus@0.2 --save&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-generator-feed@1 --save&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install hexo-generator-sitemap@1 --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Hexo初始化&quot;&gt;&lt;a href=&quot;#Hexo初始化&quot; class=&quot;headerlink&quot; title=&quot;Hexo初始化&quot;&gt;&lt;/a&gt;Hexo初始化&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo init &amp;lt;folder&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ cd &amp;lt;folder&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所有相关文件会出现在你指定的folder中。&lt;/p&gt;
&lt;h3 id=&quot;本地查看效果&quot;&gt;&lt;a href=&quot;#本地查看效果&quot; class=&quot;headerlink&quot; title=&quot;本地查看效果&quot;&gt;&lt;/a&gt;本地查看效果&lt;/h3&gt;&lt;p&gt;这步其实也没用，执行下面命令，可以到&lt;code&gt;localhost：4000&lt;/code&gt;查看效果。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建文章&quot;&gt;&lt;a href=&quot;#创建文章&quot; class=&quot;headerlink&quot; title=&quot;创建文章&quot;&gt;&lt;/a&gt;创建文章&lt;/h3&gt;&lt;p&gt;hexo写作其实主要就如下四个命令，每次创建或修改文章都需要至少执行&lt;code&gt;hexo g&lt;/code&gt;和&lt;code&gt;hexo d&lt;/code&gt;两条命令。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo n “文章名” # 创建文章&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo clean # 恩，其实并不太知道有没有用。。。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo g # 生成public静态文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo d # 发布项目到github pages&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;部署到github-pages&quot;&gt;&lt;a href=&quot;#部署到github-pages&quot; class=&quot;headerlink&quot; title=&quot;部署到github pages&quot;&gt;&lt;/a&gt;部署到github pages&lt;/h3&gt;&lt;p&gt;Hexo的发布其实是依赖git的，所以需要修改根目录下&lt;code&gt;_config.yml&lt;/code&gt;文件的&lt;code&gt;Deployment&lt;/code&gt;部分。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;# Deployment&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;## Docs: https://hexo.io/docs/deployment.html&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;deploy:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	type: git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	repo: git@github.com:kellerwang/kellerwang.github.io.git&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	branch: master&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要特别注意&lt;code&gt;type:&lt;/code&gt;、&lt;code&gt;repo:&lt;/code&gt;和&lt;code&gt;branch:&lt;/code&gt;后面需要空格，否则配置不成功。&lt;/p&gt;
&lt;p&gt;配置完成后执行&lt;code&gt;hexo d&lt;/code&gt;，然后稍等片刻去愉快地访问你的username.github.io吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直吵着要建个博客，积累点自己的东西，但无奈懒癌难医，计划脱了半年之久。巧的是上周公司training的homework就是搭建自己的博客，于是借着这波东风赶鸭子上架，花了2h时间研究了下github快速搭建博客的方法。这里写下使用Hexo搭建Blog的主要流程作为我第一篇文章，需要的拿走不谢。&lt;/p&gt;
&lt;p&gt;另外本文参考了Google上search的一些同类型文章，首先我觉得大家写的都很赞，对这些前辈就不一一感谢了。但是多数文章Hexo和github结合的一些细节表达的还不是特别清楚，导致我读的时候也有些困惑，所以不才大胆对这些资料进行总结精炼，并且对Hexo部署到github page的细节更多说明。&lt;/p&gt;
&lt;p&gt;另外转载请尽量给个面子，标注个作者啥的。实在不愿意心里默默感谢下也算了。╮(╯▽╰)╭&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://kyler.wang/categories/program/"/>
    
    
  </entry>
  
</feed>
